type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.projectlombok:lombok:1.18.24'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true

    spring.jackson.property-name-strategy = SNAKE_CASE
  learner_created: false
- name: src/cinema/controllers/CinemaController.java
  visible: true
  text: |
    package cinema.controllers;

    import cinema.entities.Cinema;
    import cinema.request.CinemaRequest;
    import cinema.response.CinemaResponse;
    import cinema.services.CinemaService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RestController;

    import java.util.Map;

    @RestController
    public class CinemaController {
        @Autowired
        private CinemaService cinemaService;

        @GetMapping("/seats")
        public Cinema getCinemaInfo() {
            return cinemaService.getCinemaInfo();
        }

        @PostMapping("/purchase")
        public ResponseEntity<?> addPurchase(@RequestBody CinemaRequest cinemaRequest){
            CinemaResponse cinemaResponse = null;
            try {
                 cinemaResponse =  cinemaService.addPurchase(cinemaRequest);
            } catch (Exception e) {
                if (e.getMessage().equals("exist")) {
                    return new ResponseEntity<>(Map.of("error", "The ticket has been already purchased!"), HttpStatus.BAD_REQUEST);
                } else if (e.getMessage().equals("wrong number")) {
                    return new ResponseEntity<>(Map.of("error", "The number of a row or a column is out of bounds!"), HttpStatus.BAD_REQUEST);
                }
            }
            if (cinemaResponse == null) {
                return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
            }
            return new ResponseEntity<>(cinemaResponse, HttpStatus.OK);
        }
    }
  learner_created: false
- name: src/cinema/entities/Seat.java
  visible: true
  text: |-
    package cinema.entities;

    import com.fasterxml.jackson.annotation.JsonProperty;

    public class Seat {
        private final int row;
        private final int column;
        private final int price;

        public Seat(){
            this.price = 0;
            this.row = 0;
            this.column = 0;
        }
        public Seat (int row, int column){
            this.row = row;
            this.column = column;
            this.price = row > 4 ? 8 : 10;

        }

        public int getRow() {
            return row;
        }

        public int getColumn() {
            return column;
        }

        public int getPrice() {
            return price;
        }
    }
  learner_created: false
- name: src/cinema/entities/Cinema.java
  visible: true
  text: |
    package cinema.entities;

    import java.util.List;

    public class Cinema {
        private int total_rows;
        private int total_columns;
        private List<Seat> available_seats;

        public Cinema() {}
        public Cinema(int total_rows, int total_columns, List<Seat> availableSeats) {
            this.total_rows = total_rows;
            this.total_columns = total_columns;
            this.available_seats = availableSeats;
        }

        public int getTotal_rows() {
            return total_rows;
        }

        public int getTotal_columns() {
            return total_columns;
        }

        public List<Seat> getAvailable_seats() {
            return available_seats;
        }
    }
  learner_created: false
- name: src/cinema/repositories/CinemaRepository.java
  visible: true
  text: |
    package cinema.repositories;

    import cinema.entities.Seat;
    import org.springframework.stereotype.Repository;

    import java.util.ArrayList;
    import java.util.List;

    @Repository
    public class CinemaRepository {
        private static final int TOTAL_ROWS = 9;
        private static final int TOTAL_COLUMNS = 9;
        private static final List<Seat> SEATS;

        static {
            SEATS = new ArrayList<>();
            for (int row = 1; row <= TOTAL_ROWS; row++) {
                for (int column = 1; column <= TOTAL_COLUMNS; column++) {
                    SEATS.add(new Seat(row, column));
                }
            }
        }
        public int getTotalRows() {
            return TOTAL_ROWS;
        }

        public int getTotalColumns() {
            return TOTAL_COLUMNS;
        }

        public List<Seat> getAllSeats() {
            return SEATS;
        }
    }
  learner_created: false
- name: src/cinema/services/CinemaService.java
  visible: true
  text: |-
    package cinema.services;

    import cinema.entities.Cinema;
    import cinema.entities.Seat;
    import cinema.repositories.CinemaRepository;
    import cinema.request.CinemaRequest;
    import cinema.response.CinemaResponse;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.ResponseEntity;
    import org.springframework.stereotype.Service;

    @Service
    public class CinemaService {

        @Autowired
        private CinemaRepository cinemaRepository;

        public Cinema getCinemaInfo() {
            return new Cinema(cinemaRepository.getTotalRows(), cinemaRepository.getTotalColumns(), cinemaRepository.getAllSeats());
        }

        public CinemaResponse addPurchase(CinemaRequest cinemaRequest) throws Exception {
            if (cinemaRequest.getColumn() < 1 ||
                cinemaRequest.getRow() < 1 ||
                cinemaRequest.getRow() > cinemaRepository.getTotalRows() ||
                cinemaRequest.getColumn() > cinemaRepository.getTotalColumns()) {
                throw new Exception("wrong number");
            }

            for (int i = 0; i < cinemaRepository.getAllSeats().size(); i++) {
                Seat s = cinemaRepository.getAllSeats().get(i);
                if (s.getColumn() == cinemaRequest.getColumn() && s.getRow() == cinemaRequest.getRow()) {
                    cinemaRepository.getAllSeats().remove(i);
                    return new CinemaResponse(cinemaRequest.getRow(), cinemaRequest.getColumn(), s.getPrice());
                }
            }

            throw new Exception("exist");
        }
    }
  learner_created: false
- name: src/cinema/request/CinemaRequest.java
  visible: true
  text: |
    package cinema.request;

    public class CinemaRequest {
        private int row;
        private int column;

        public CinemaRequest() {
        }

        public CinemaRequest(int row, int column) {
            this.row = row;
            this.column = column;
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }
    }
  learner_created: false
- name: src/cinema/response/CinemaResponse.java
  visible: true
  text: |
    package cinema.response;

    public class CinemaResponse {
        private int row;
        private int column;
        private int price;

        public CinemaResponse() {
        }

        public CinemaResponse(int row, int column, int price) {
            this.row = row;
            this.column = column;
            this.price = price;
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public int getPrice() {
            return price;
        }

        public void setPrice(int price) {
            this.price = price;
        }
    }
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";

        private static final Gson gson = new Gson();

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket
        };
    }
  learner_created: false
- name: src/cinema/request/CinemaRequestReturn.java
  visible: true
  learner_created: true
- name: src/cinema/entities/Ticket.java
  visible: true
  learner_created: true
- name: src/cinema/response/CinemaResponseReturn.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13377#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 23 Jul 2022 16:37:56 UTC
record: 3
